// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(BarbecueDbContext))]
    [Migration("20210520214013_SeparateOperationCategory")]
    partial class SeparateOperationCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Models.Db.Account.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Models.Db.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Models.Db.Invite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("State")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("Models.Db.MoneyOperations.IncomeMoneyOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OperationCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("PurseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationCategoryId");

                    b.HasIndex("PurseId");

                    b.ToTable("IncomeMoneyOperations");
                });

            modelBuilder.Entity("Models.Db.MoneyOperations.OutComeMoneyOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OperationCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("PurseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationCategoryId");

                    b.HasIndex("PurseId");

                    b.ToTable("OutComeMoneyOperations");
                });

            modelBuilder.Entity("Models.Db.OperationCategories.OperationCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PurseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationCategory");

                    b.HasDiscriminator<string>("Discriminator").HasValue("OperationCategory");
                });

            modelBuilder.Entity("Models.Db.Purse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("Purses");
                });

            modelBuilder.Entity("Models.Db.Sessions.TokenSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("TokenSessions");
                });

            modelBuilder.Entity("Models.Db.UserToGroup", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserToGroups");
                });

            modelBuilder.Entity("Models.Db.OperationCategories.IncomeOperationCategory", b =>
                {
                    b.HasBaseType("Models.Db.OperationCategories.OperationCategory");

                    b.HasIndex("PurseId");

                    b.HasDiscriminator().HasValue("IncomeOperationCategory");
                });

            modelBuilder.Entity("Models.Db.OperationCategories.OutComeOperationCategory", b =>
                {
                    b.HasBaseType("Models.Db.OperationCategories.OperationCategory");

                    b.HasIndex("PurseId");

                    b.HasDiscriminator().HasValue("OutComeOperationCategory");
                });

            modelBuilder.Entity("Models.Db.Invite", b =>
                {
                    b.HasOne("Models.Db.Group", "Group")
                        .WithMany("Invites")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Account.User", "Issuer")
                        .WithMany("IssuedInvites")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Account.User", "Recipient")
                        .WithMany("ReceivedInvites")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Issuer");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Models.Db.MoneyOperations.IncomeMoneyOperation", b =>
                {
                    b.HasOne("Models.Db.OperationCategories.OperationCategory", "OperationCategory")
                        .WithMany()
                        .HasForeignKey("OperationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Purse", "Purse")
                        .WithMany("IncomingOperations")
                        .HasForeignKey("PurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationCategory");

                    b.Navigation("Purse");
                });

            modelBuilder.Entity("Models.Db.MoneyOperations.OutComeMoneyOperation", b =>
                {
                    b.HasOne("Models.Db.OperationCategories.OperationCategory", "OperationCategory")
                        .WithMany()
                        .HasForeignKey("OperationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Purse", "Purse")
                        .WithMany("OutComingOperations")
                        .HasForeignKey("PurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationCategory");

                    b.Navigation("Purse");
                });

            modelBuilder.Entity("Models.Db.Purse", b =>
                {
                    b.HasOne("Models.Db.Group", "Group")
                        .WithOne("Purse")
                        .HasForeignKey("Models.Db.Purse", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Models.Db.Sessions.TokenSession", b =>
                {
                    b.HasOne("Models.Db.Account.User", "User")
                        .WithMany("TokenSessions")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Db.UserToGroup", b =>
                {
                    b.HasOne("Models.Db.Group", "Group")
                        .WithMany("UsersRelation")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Account.User", "User")
                        .WithMany("GroupsRelation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Db.OperationCategories.IncomeOperationCategory", b =>
                {
                    b.HasOne("Models.Db.Purse", "Purse")
                        .WithMany("IncomeOperationCategories")
                        .HasForeignKey("PurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purse");
                });

            modelBuilder.Entity("Models.Db.OperationCategories.OutComeOperationCategory", b =>
                {
                    b.HasOne("Models.Db.Purse", "Purse")
                        .WithMany("OutComeOperationCategories")
                        .HasForeignKey("PurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purse");
                });

            modelBuilder.Entity("Models.Db.Account.User", b =>
                {
                    b.Navigation("GroupsRelation");

                    b.Navigation("IssuedInvites");

                    b.Navigation("ReceivedInvites");

                    b.Navigation("TokenSessions");
                });

            modelBuilder.Entity("Models.Db.Group", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Purse");

                    b.Navigation("UsersRelation");
                });

            modelBuilder.Entity("Models.Db.Purse", b =>
                {
                    b.Navigation("IncomeOperationCategories");

                    b.Navigation("IncomingOperations");

                    b.Navigation("OutComeOperationCategories");

                    b.Navigation("OutComingOperations");
                });
#pragma warning restore 612, 618
        }
    }
}
